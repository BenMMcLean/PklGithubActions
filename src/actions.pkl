import "trigger.pkl"
import "constraints.pkl"

name: String

`run-name`: String?

on: trigger.On?

permissions: Permission?

env: Mapping<String, Any>?

defaults: Defaults?

concurrency: Concurrency?

jobs: Mapping<String(matches(validJobName)), Job>?

typealias Permission = Mapping<ScopePermission, List<ScopePermissionOptions>> | GlobalPermission
typealias ScopePermission = "actions" | "checks" | "contents" | "deployments" | "discussions" | "id-token" | "issues" 
    | "packages" | "pages" | "pull-requests" | "repository-projects" | "security-events" | "statuses"
typealias ScopePermissionOptions = "read" | "write" | "none"
typealias GlobalPermission = "read-all" | "write-all"
typealias Shell = "bash" | "pwsh" | "python" | "sh" | "cmd" | "powershell"
typealias Defaults = Mapping<String, Any> | DefaultRun

class DefaultRun {
    shell: Shell?
    `working-directory`: String?
}

class Concurrency {
    group: String
    `cancel-in-progress`: Boolean
}

class Job {
    name: String?
    permissions: Permission?
    needs: List<String>?
    `if`: String?
    `runs-on`: String = "ubuntu-latest"
    environment: (String | Environment)?
    concurrency: Concurrency?
    outputs: Mapping<String, String>?
    env: Mapping<String, Any>?
    defaults: Defaults?
    `timeout-minutes`: Int?
    strategy: JobStrategy?
    `continue-on-error`: Boolean?
    container: Container?
    services: Mapping<String, ContainerConfig>?
    uses: String?((this == null).xor(steps == null))
    with: Mapping<String, Any>?((this != null).implies(uses != null))
    secrets: Mapping<String, String>
    steps: List<Step>?
}

class Environment {
    name: String
    url: String
}

class JobStrategy {
    matrix: Mapping<String, Any>
}

class Container {
    `runs-on`: String?
    container: String | ContainerConfig
}

class ContainerConfig {
    image: String
    env: Mapping<String, Any>?
    ports: List<String>?
    volumes: List<String>?
    options: List<String>?
    credentials: Credentials?
}

class Credentials {
    username: String
    password: String
}

abstract class Step {
    id: String?
    name: String?
    `if`: String?
}

class ActionStep extends Step {
    uses: String
    with: Mapping<String, Any>?
    env: Mapping<String, Any>?
}

class CommandStep extends Step {
    run: String
}